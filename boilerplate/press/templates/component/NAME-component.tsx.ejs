import * as React from "react"
import { View, ViewStyle } from "react-native"
import { Text } from "../"
import { <%= props.pascalCaseName %>PresetNames, <%= props.camelCaseName %>Presets } from "./<%= props.kebabCaseName %>.presets"

export interface <%= props.pascalCaseName %>Props {
  /**
   * Text which is looked up via i18n.
   */
  tx?: string

  /**
   * The text to display if not using `tx` or nested components.
   */
  text?: string

  /**
   * An optional style override useful for padding & margin.
   */
  style?: ViewStyle
  /**
   * Which preset is being used
   */
  preset?: <%= props.pascalCaseName %>PresetNames
  /**
  * Generated props here
  */
  <%= props.componentProps.map((prop,i)=>{if(i==0){return (prop.prop + ': ' + prop.type)}return('\n  '+prop.prop + ': ' + prop.type)}) %>
}

/**
 * Stateless functional component for your needs
 *
 * Component description here for TypeScript tips.
 */
export function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {
  // grab the props
  const {
    tx,
    text,
    style,
    preset = 'primary',
    <%= props.componentProps.map((prop,i)=>{if(i==0){return (prop.prop)}return('\n  '+prop.prop)}) %>
    ...rest
  } = props

  // grab preset data
  const {
    viewStyle,
    textStyle,
    // hasIcon,
    // etc...
  } = <%= props.camelCaseName %>Presets[preset]

  return (
    <View style={[style, viewStyle]} {...rest}>
      <Text tx={tx} text={text} style={textStyle}/>
    </View>
  )
}
